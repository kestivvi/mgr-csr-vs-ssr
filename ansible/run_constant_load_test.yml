---
- name: Run k6 Constant Load Test Synchronously
  hosts: role_load_generator_csr, role_load_generator_ssr
  gather_facts: no
  vars:
    # These values can be overridden from the ansible-playbook command if needed
    k6_rps: 100
    k6_duration: "5m"

  tasks:
    - name: Define server-specific variables
      ansible.builtin.set_fact:
        # Determines server type ('csr' or 'ssr') based on the host's group membership
        server_type_lower: "{{ 'csr' if 'role_load_generator_csr' in group_names else 'ssr' }}"
        server_type_upper: "{{ 'CSR' if 'role_load_generator_csr' in group_names else 'SSR' }}"

    - name: Set target_url based on server type
      ansible.builtin.set_fact:
        # Constructs the target URL dynamically using the private IP of the corresponding app server
        # e.g. for a host in 'role_load_generator_csr', it finds the IP of the host in 'app_server_csr'
        target_url: "http://{{ hostvars[groups['app_server_' + server_type_lower][0]]['private_ip'] }}"

    - name: Display Target URL for verification
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} (type: {{ server_type_lower | upper }}) will target {{ target_url }}"

    - name: Clean up any previous k6 archive artifacts
      ansible.builtin.file:
        path: /home/ec2-user/k6_archive.tar
        state: absent
      become: yes
      # This task runs with elevated privileges to remove the root-owned directory
      # that may be left over from a previous failed run, ensuring the path is writable.

    - name: Copy k6 test archive to remote host
      ansible.builtin.copy:
        src: "{{ project_root }}/k6/build/k6_archive.tar"
        dest: /home/ec2-user/k6_archive.tar
        mode: '0644'

    - name: Ensure k6 Docker image is present
      community.docker.docker_image:
        name: "grafana/k6:1.1.0"
        source: pull
      # This task ensures the k6 image is pulled before use, preventing
      # stderr pollution from the 'docker pull' command during the run.

    - name: Run k6 constant load test
      block:
        - name: Create k6 runner script from template
          ansible.builtin.template:
            src: templates/run_constant_k6.sh.j2
            dest: /tmp/run_constant_k6.sh
            mode: '0755'

        - name: Execute k6 runner script
          ansible.builtin.shell:
            cmd: /tmp/run_constant_k6.sh
          register: k6_result
          changed_when: true
          # This command will block until k6 finishes on each host

      always:
        - name: Clean up k6 runner script
          ansible.builtin.file:
            path: /tmp/run_constant_k6.sh
            state: absent 